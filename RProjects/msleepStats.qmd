---
title: 'DTSC 650: Data Analytics In R'
subtitle: 'CodeGrade Assignments Part 2: msleepStats'
output: html_notebook
editor_options:
  chunk_output_type: inline
---

## Student Info

```         
Name: Steph Roberts
Term: 2024 SP1
Date: 06 Feb 2024
```

------------------------------------------------------------------------

## General Instructions

------------------------------------------------------------------------

### Name of File

Name your assignment file **`msleepStats`**. This is a quarto "markdown" file, which has the file has the extension '.qmd'.

------------------------------------------------------------------------

### Allowable packages

The only allowable package is `tidyverse`. You should not use any other packages as CodeGrade is not set up to accept them on this assignment.

-   If the allowable packages are not installed on your local computer, you'll need to do a one-time installation *from the Console Window in RStudio* for each package like this:\
    **`install.packages('<package name>')`**\
    *Do not attempt to install packages in code that you submit to CodeGrade.*

-   Note: installing the entire tidyverse with `install.packages('tidyverse')` from the Console Window will save you from having to install any of the tidyverse's individual packages in the future.

-   In your code, load the package's library like this: **`library(<library name>)`**

------------------------------------------------------------------------

### Data Set

The data set for this assignment is called **`msleep`**. See the [msleep documentation](https://ggplot2.tidyverse.org/reference/msleep.html) for more info.

------------------------------------------------------------------------

### Pipe Notation

You may use the `tidyverse` pipe **`%>%`** or the new base R pipe **`|>`**. See [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) for a comparison.

You are expected to use pipe notation in all of the CodeGrade assignments. Although there are alternate ways to filter, subset, and summarize data sets, using the pipe creates more readable code and is an important skill to develop.

------------------------------------------------------------------------

### Rounding requirement

-   Round all float/dbl values to two decimal places.

------------------------------------------------------------------------

### Dataframe vs. Tibble

Typically, in CodeGrade assignments, we expect output to be dataframes, not tibbles, unless otherwise noted.

------------------------------------------------------------------------

### Inline vs. Console

By default, RStudio uses Inline output (Notebook mode) on R Markdown documents. You can switch between Inline and Console output modes by clicking the gear button in the editor toolbar (to the left of the green "insert new code chunk") and choosing either "Chunk Output Inline" or "Chunk Output in Console". See [here](https://bookdown.org/yihui/rmarkdown/notebook.html#creating-a-notebook) for more information.

Console output can be useful for debugging since that's how your solutions will appear to CodeGrade. You can type code directly into the Console as well and run it from there.

------------------------------------------------------------------------

### Preliminaries

```{r}
### It's always a good idea when working in RStudio to start with a clean environment. 
### Clear objects from the environment memory that may be leftoever from previous versions of your code or other assignments by running the following line:
rm(list = ls())

### Load Libraries
library(tidyverse) 

### There may be warning messages about some of the packages. You can ignore these. Feel free to search online for the explanations for these messages.
```

------------------------------------------------------------------------

## Questions

------------------------------------------------------------------------

### Q1 Run cor.test() for the relationship between total sleep and body weight values.

-   The answer should be assigned to Q1. Do not round. Don't worry if you have more decimal places than you see listed in CodeGrade's expected output. CodeGrade will account for that.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q1 # 

### TYPE YOUR CODE BELOW ###


Q1 <- cor.test(msleep$sleep_total, msleep$bodywt)


### VIEW OUTPUT ###
Q1

```

### Q2 Create a correlation matrix for the relations among total sleep, rem sleep, brain weight, and body weight. Make sure to remove missing values.

-   The matrix should be assigned to Q2 and look something like this:

```         
        sleep_total sleep_rem brainwt  bodywt
sleep_total [value]   [value] [value] [value]
sleep_rem   [value]   [value] [value] [value]
brainwt     [value]   [value] [value] [value]
bodywt      [value]   [value] [value] [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q2 # 

### TYPE YOUR CODE BELOW ###



Q2 <- msleep |> 
  select(sleep_total, 
         sleep_rem, 
         brainwt, 
         bodywt) |> 
  drop_na() |> 
  cor() |> 
  round(2)


### VIEW OUTPUT ###
Q2

```

### Q3 Run a regression predicting body weight by vore.

-   Assign the coefficients of the model to Q3. Your output should look something like this:

```         
(Intercept) voreherbi voreinsecti voreomni
    [value]   [value]     [value]  [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q3 # 

### TYPE YOUR CODE BELOW ###

lm_vore <- lm(bodywt ~ vore, msleep)

Q3 <- round(coefficients(lm_vore), 2)

### VIEW OUTPUT ###
Q3

```

### Q4 Create a regression predicting bodywt by vore and REM sleep. Compared to the model in Q3, which one has the better AIC?

-   Assign the better AIC value to Q4.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q4 # 

### TYPE YOUR CODE BELOW ###


lm_vore_rem <- lm(bodywt ~ vore + sleep_rem, msleep)

v_AIC <- round(AIC(lm_vore),2)
vr_AIC <-round(AIC(lm_vore_rem),2)

Q4 <- vr_AIC

### VIEW OUTPUT ###
Q4

```

### Q5 Create a logistic regression predicting whether or not an animal is a carnivore or herbivore based on sleep total.

-   You'll need to filter out omnivores and insectivores:

    ``` r
    filter(vore != "omni" & vore != "insecti")
    ```

-   You will need to use the following code to create the variable you are predicting:

    ``` r
    mutate(vorebin = ifelse(vore == 'carni', 0, 1))
    ```

-   Do not round these values.

-   Do not use \$ notation to reference the variables in the `glm()` function call, instead use the `data=` parameter.

-   Assign the model to Q5. Your output should look something like this:

```         
Coefficients:
(Intercept) sleep_total
    [value]     [value]
Degrees of Freedom: [value] Total (i.e. Null); [value] Residual
Null Deviance: [value]
Residual Deviance: [value] AIC: [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q5 # 

### TYPE YOUR CODE BELOW ###

msleep_vore <- msleep |> 
  filter(vore != "omni" & vore != "insecti") |> 
  mutate(vorebin = ifelse(vore == 'carni', 0, 1)) |> 
  as.data.frame()

Q5 <- glm(vorebin ~ sleep_total, binomial(), msleep_vore)

### VIEW OUTPUT ###
Q5

```

------------------------------------------------------------------------

# Before submitting to Code Grade:

1)  Clear objects from your environment. Click the broom in the Environment pane in the top right. This will erase any variables (like Q1, Q2) that you've stored.

2)  Rerun all your code. You can click the "Run" option above in this script pane (top right of notebook), then select "Run all". You should have all the variables stored again in the environment pane, and you should see no red error messages in the console below.

------------------------------------------------------------------------
