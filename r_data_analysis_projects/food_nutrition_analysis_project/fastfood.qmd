---
title: 'DTSC 650: Data Analytics In R'
subtitle: 'CodeGrade Assignments Part 1: fastfood'
output: html_notebook
editor_options:
  chunk_output_type: inline
---

## Student Info

```         
Name: Steph Roberts
Term: 2024SP1
Date: 24JAN2024
```

------------------------------------------------------------------------

## General Instructions

------------------------------------------------------------------------

### Name of File

Name your assignment file **`fastfood`**. This is a quarto "markdown" file, which has the file has the extension '.qmd'.

------------------------------------------------------------------------

### Allowable packages

The only allowable packages are `tidyverse` and `openintro` (you will need to install it if you haven't already). You should not use any other packages as CodeGrade is not set up to accept them on this assignment.

-   If the allowable packages are not installed on your local computer, you'll need to do a one-time installation *from the Console Window in RStudio* for each package like this:\
    **`install.packages('<package name>')`**\
    *Do not attempt to install packages in code that you submit to CodeGrade.*

-   Note: installing the entire tidyverse with `install.packages('tidyverse')` from the Console Window will save you from having to install any of the tidyverse's individual packages in the future.

-   In your code, load the package's library like this: **`library(<library name>)`**

------------------------------------------------------------------------

### Data Set

The data set for this assignment is called **`fastfood`**. See the [fastfood documentation](https://www.openintro.org/data/index.php?data=fastfood) for more info.

------------------------------------------------------------------------

### Pipe Notation

You may use the `tidyverse` pipe **`%>%`** or the new base R pipe **`|>`**. See [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) for a comparison.

You are expected to use pipe notation in all of the CodeGrade assignments. Although there are alternate ways to filter, subset, and summarize data sets, using the pipe creates more readable code and is an important skill to develop.

------------------------------------------------------------------------

### Rounding requirement

-   Round all float/dbl values to two decimal places.

------------------------------------------------------------------------

### Dataframe vs. Tibble

Typically, in CodeGrade assignments, we expect output to be dataframes, not tibbles, unless otherwise noted.

------------------------------------------------------------------------

### Inline vs. Console

By default, RStudio uses Inline output (Notebook mode) on R Markdown documents. You can switch between Inline and Console output modes by clicking the gear button in the editor toolbar (to the left of the green "insert new code chunk") and choosing either "Chunk Output Inline" or "Chunk Output in Console". See [here](https://bookdown.org/yihui/rmarkdown/notebook.html#creating-a-notebook) for more information.

Console output can be useful for debugging since that's how your solutions will appear to CodeGrade. You can type code directly into the Console as well and run it from there. For example: after you run the Q0 example code inline (shown below), you can type `Q0<ENTER>` in the Console to see how the output appears to CodeGrade.

------------------------------------------------------------------------

### Preliminaries

```{r}
### It's always a good idea when working in RStudio to start with a clean environment. 
### Clear objects from the environment memory that may be leftoever from previous 
###   versions of your code or other assignments by running the following line:
rm(list = ls())


### Load Libraries
library(tidyverse) 
library(openintro)

### There may be warning messages about some of the packages. You can ignore these. Feel free to search online for the explanations for these messages.
```

### Before attempting the questions (Q1-Q5) below, familiarize yourself with the `fastfood` dataset. Run the following block.

```{r}
fastfood

# You may get a warning based on your version of R, which says:
## "[WARNING] Deprecated: --self-contained. use --embed-resources --standalone"
# You can ignore this.
```

### Q0: An Example (or two)

Suppose the question is:\
**Q0.1 List the top 3 items with the most calories from each restaurant. Output the answer as a data frame and store it in Q0.\
\
**The following code block provides the solution:

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q0.1 # 

Q0.1 <- fastfood %>%
  select(restaurant, calories, item) %>%
  group_by(restaurant) %>% 
  slice_max(calories, n=3) %>%
  as.data.frame()
Q0.1
```

For the above code block, run the entire cell with the green arrow on the right.

Suppose another question is:\
**Q0.2 How many items from each restaurant contain more than 1,000 calories. Output the answer as a data frame and store it in Q0.**

The following code block provides the solution:

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q0.2 # 

Q0.2 <- fastfood %>%   
  select(restaurant, calories) %>%   
  filter(calories>1000) %>%    
  group_by(restaurant) %>%    
  summarise(item_count = n()) %>%    
  as.data.frame() 
Q0.2
```

For the above code block, run the entire cell with the green arrow on the right.

We recommend highlighting each section of this solution and investigating the output to understand what the pipe and code are doing. In other words, use your cursor to highlight *``` fastfood %>% select(restaurant, calories) %>% filter(calories>1000)``) ```* in the block above, press CTRL + ENTER (on a PC), and see what the output is. This will help you understand the pipe and debug your code.

We expect your solutions to look like the above code block, where you are using the pipe operator (not other approaches) and, in some cases, finding the solution in just one line of code.

------------------------------------------------------------------------

## Questions

------------------------------------------------------------------------

### Q1 Looking only at Burger King and Chick-Fil-A, which item has the highest calories?

-   Your solution should be a dataframe assigned to Q1.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q1 # 

### TYPE YOUR CODE BELOW ###

Q1 <- fastfood |> 
  filter(restaurant %in% c("Burger King", "Chick-Fil-a")) |> 
  slice_max(calories, n = 1) |> 
  select(item) |> 
  as.data.frame()
           



### VIEW OUTPUT ###
Q1

```

### Q2 What is the average sugar amount for all items from Subway?

-   Your solution should be a dataframe assigned to Q2.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q2 # 

### TYPE YOUR CODE BELOW ###

Q2 <- fastfood |> 
  filter(restaurant == "Subway") |> 
  summarise(sug_sub = round(mean(sugar, na.rm = TRUE), 2)) |> 
  as.data.frame()



### VIEW OUTPUT ###
Q2

```

### Q3 What is the average value of calories for all items from Taco Bell?

-   Your solution should be a dataframe assigned to Q3.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q3 # 

### TYPE YOUR CODE BELOW ###

Q3 <- fastfood |> 
  filter(restaurant == "Taco Bell") |> 
  summarise(tb_cal = round(mean(calories, na.rm = TRUE), 2)) |> 
  as.data.frame()



### VIEW OUTPUT ###
Q3

```

### Q4 Create a variable equal to total_fat x sugar called fatXsugar. Produce a dataframe that has the restaurant, item, and fatXsugar for the top 3 items, from highest to lowest.

-   Your solution should be a dataframe assigned to Q4. In the Console Window the output should look something like this:

```         
  restaurant   item fatXsugar
1     [name] [name]   [value]
2     [name] [name]   [value]
3     [name] [name]   [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q4 # 

### TYPE YOUR CODE BELOW ###

Q4 <- fastfood |> 
  mutate(fatXsugar = total_fat * sugar) |> 
  select(restaurant, item, fatXsugar) |> 
  arrange(desc(fatXsugar)) |> 
  slice_head(n = 3) |> 
  as.data.frame()

### VIEW OUTPUT ###
Q4

```

### Q5 How many restaurants have an average saturated fat over 10?

-   Your solution should be a dataframe assigned to Q5.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q5 # 

### TYPE YOUR CODE BELOW ###

Q5 <- fastfood |> 
  group_by(restaurant) |> 
  summarise(ave_sat_fat = round(mean(sat_fat, na.rm= TRUE), 2)) |> 
  filter(ave_sat_fat > 10) |> 
  summarise(rest_high_fat = n()) |> 
  as.data.frame()


### VIEW OUTPUT ###
Q5

```

------------------------------------------------------------------------

# Before submitting to Code Grade:

1)  Clear objects from your environment. Click the broom in the Environment pane in the top right. This will erase any variables (like Q1, Q2) that you've stored.

2)  Rerun all your code. You can click the "Run" option above in this script pane (top right of notebook), then select "Run all". You should have all the variables stored again in the environment pane, and you should see no red error messages in the console below.

------------------------------------------------------------------------
