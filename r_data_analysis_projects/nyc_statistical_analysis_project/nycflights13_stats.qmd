---
title: 'DTSC 650: Data Analytics In R'
subtitle: 'CodeGrade Assignments Part 2: nycflights13Stats'
output: html_notebook
editor_options:
  chunk_output_type: inline
---

## Student Info

```         
Name: Steph Roberts
Term: 2024 SP1
Date: 28JAN2024
```

------------------------------------------------------------------------

## General Instructions

------------------------------------------------------------------------

### Name of File

Name your assignment file **`nycflights13Stats`**. This is a quarto "markdown" file, which has the file has the extension '.qmd'.

------------------------------------------------------------------------

### Allowable packages

The only allowable packages are `tidyverse`, `nycflights13`, and `lm.beta`. You should not use any other packages as CodeGrade is not set up to accept them on this assignment.

-   If the allowable packages are not installed on your local computer, you'll need to do a one-time installation *from the Console Window in RStudio* for each package like this:\
    **`install.packages('<package name>')`**\
    *Do not attempt to install packages in code that you submit to CodeGrade.*

-   Note: installing the entire tidyverse with `install.packages('tidyverse')` from the Console Window will save you from having to install any of the tidyverse's individual packages in the future.

-   In your code, load the package's library like this: **`library(<library name>)`**

------------------------------------------------------------------------

### Data Set

The data set for this assignment is called **`flights`**. See the [nycflights13 documentation](https://nycflights13.tidyverse.org/) for more info.

------------------------------------------------------------------------

### Pipe Notation

You may use the `tidyverse` pipe **`%>%`** or the new base R pipe **`|>`**. See [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) for a comparison.

You are expected to use pipe notation in all of the CodeGrade assignments. Although there are alternate ways to filter, subset, and summarize data sets, using the pipe creates more readable code and is an important skill to develop.

------------------------------------------------------------------------

### Rounding requirement

-   Round all float/dbl values to two decimal places.

------------------------------------------------------------------------

### Dataframe vs. Tibble

Typically, in CodeGrade assignments, we expect output to be dataframes, not tibbles, unless otherwise noted.

------------------------------------------------------------------------

### Inline vs. Console

By default, RStudio uses Inline output (Notebook mode) on R Markdown documents. You can switch between Inline and Console output modes by clicking the gear button in the editor toolbar (to the left of the green "insert new code chunk") and choosing either "Chunk Output Inline" or "Chunk Output in Console". See [here](https://bookdown.org/yihui/rmarkdown/notebook.html#creating-a-notebook) for more information.

Console output can be useful for debugging since that's how your solutions will appear to CodeGrade. You can type code directly into the Console as well and run it from there.

------------------------------------------------------------------------

### Requirement when using lm()

For questions 6-10, your regressions must use the following structure: `lm([variable] ~ [variable], data = [dataset])`. 

CodeGrade will mark your work incorrect if you use the structure: `lm(dataset$variable1 ~ dataset$variable2)`.

------------------------------------------------------------------------

### Preliminaries

```{r}
### It's always a good idea when working in RStudio to start with a clean environment. 
### Clear objects from the environment memory that may be leftover from previous versions of your code or other assignments by running the following line:
rm(list = ls())

### Load Libraries
library(tidyverse) 
library(nycflights13) 
library(lm.beta)

### There may be warning messages about some of the packages. You can ignore these. Feel free to search online for the explanations for these messages.
```

## Context

Suppose we are flying to our favorite vacation destination. Can we predict how long our arrival delay will be from our departure delay? Would knowing our departure delay and the distance to our destination provide a better prediction? What about the carrier? We will work to answer these questions through this assignment.

------------------------------------------------------------------------

## Questions

------------------------------------------------------------------------



### Q1 Analyze the distribution of `departure delays`. Use the space below for your graphical and numerical analysis. Store the summary of this variable in Q1. 

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q1 # 

### TYPE YOUR CODE BELOW ###

#Get to know the data
glimpse(flights)
summary(flights)
nrow(flights) #There are a total of 336776 rows in the original data

#Create a histogram of the predicted variable
ggplot(flights, aes(x = dep_delay)) +
  geom_histogram(binwidth = 10)


#View summary of departure delays
Q1 <- summary(flights$dep_delay) #note there are 8255 NA's in departure delays

### VIEW OUTPUT ###
Q1


```

### Q2 Based on your graphical and numerical analysis in Q1, which method -- 1.5(IQR) or 3(SD) -- is more appropriate to remove outliers from the `departure delay` variable? Remove outliers for `departure delay` with the appropriate method. Store this new dataset as `no_out_dd`. You'll want to use this new dataset without outliers for use in Q3. What proportion of rows remains following the removal of these outliers? Store this number as Q2. Do not hardcode the answer.

* Note: A boxplot of departure delays in new dataset will still reveal outliers, based on the new five-number summary. For the purpose of this assignment, we will retain these "new" outliers in our dataframe. To completely remove all outliers, we would need to repeat the outlier removal process multiple times.

-   Your answer should be a number assigned to Q2. Do not round.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q2 # 

### TYPE YOUR CODE BELOW ###

#According to course notes, "For distributions that are skewed or have many outliers, the 1.5(IQR) rule is more frequently used than the 3SD rule."
#We should use 1.5(IQR) method because departure delays is heavily skewed.

#View boxplot to see extent of outliers
ggplot(flights, aes(x = dep_delay)) +
  geom_boxplot()

#Quartile 3 + 1.5(IQR)
upper_fence <- quantile(flights$dep_delay, 0.75, na.rm = TRUE) + 1.5 * IQR(flights$dep_delay, na.rm = TRUE)

#Quartile 1 - 1.5(IQR)
lower_fence <- quantile(flights$dep_delay, 0.25, na.rm = TRUE) - 1.5 * IQR(flights$dep_delay, na.rm = TRUE)

#Remove the outliers for departure delays
no_out_dd <- flights |> 
  filter(dep_delay >= lower_fence & dep_delay <= upper_fence) |> 
  as.data.frame()

nrow(no_out_dd) #has 285,305 observations after removing NA's and outliers (original data had 336,776)

#View boxplot after removing outliers and missing data
ggplot(no_out_dd, aes(x = dep_delay)) +
  geom_boxplot()

Q2 <- nrow(no_out_dd) / nrow(flights)


### VIEW OUTPUT ###
Q2

```

### Q3 Using the `no_out_dd` dataset you created in Q2, remove outliers for `arrival delay` with the appropriate method. You'll want to create a new dataset without outliers for use in Q4-10. Store this new dataset as `no_out_dd_ad`. Store the dimensions of `no_out_dd_ad` in Q3. Do not hardcode the answer.

* Note: A boxplot of `arrival delay` the new dataset will still reveal outliers, based on the new five-number summary. For the purpose of this assignment, we will retain these "new" outliers in our dataframe. To completely remove the new outliers, we would need to repeat the outlier removal process one more time.

-   Your answer should be two numbers assigned to Q3.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q3 # 

### TYPE YOUR CODE BELOW ###

#View boxplot to see extent of outliers for arrival delays
ggplot(no_out_dd, aes(x = arr_delay)) +
  geom_boxplot()

#Quartile 3 + 1.5(IQR)
upper_fence_arr <- quantile(no_out_dd$arr_delay, 0.75, na.rm = TRUE) + 1.5 * IQR(no_out_dd$arr_delay, na.rm = TRUE)

#Quartile 1 - 1.5(IQR)
lower_fence_arr <- quantile(no_out_dd$arr_delay, 0.25, na.rm = TRUE) - 1.5 * IQR(no_out_dd$arr_delay, na.rm = TRUE)

#Remove outliers for arrival delays
no_out_dd_ad <- no_out_dd |> 
  filter(arr_delay >= lower_fence_arr, 
         arr_delay <= upper_fence_arr) |> 
  as.data.frame()

nrow(no_out_dd_ad) #There are now 276,121 observations compared with the original 336,776


Q3 <- dim(no_out_dd_ad)

### VIEW OUTPUT ###
Q3

```


### Q4 What proportion of rows remain in `no_out_dd_ad` compared to the original `flights` dataset? Store the proportion in Q4. Do not hardcode the answer.

-   Your answer should be a number assigned to Q4. Do not round.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q4 # 

### TYPE YOUR CODE BELOW ###

Q4 <- nrow(no_out_dd_ad) / nrow(flights)

### VIEW OUTPUT ###
Q4
```



### Q5 Using the `no_out_dd_ad` dataframe, run `cor.test` for the relationship between departure delay and arrival delay.

-   Assign the results of the `cor.test()` function call to Q5. Do not round.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q5 # 

### TYPE YOUR CODE BELOW ###


#Create easily accessible objects for departure and arrival delays
dep <- no_out_dd_ad$dep_delay 
arr <- no_out_dd_ad$arr_delay

Q5 <- cor.test(dep, arr) #There is a moderate positive correlation between arrival and departure delays


### VIEW OUTPUT ###
Q5

```

### Q6 Using the `no_out_dd_ad` dataframe, create a regression predicting arrival delay from departure delay.

-   The summary of the model should be assigned to Q6. Do not round.
-   As mentioned in the directions, to match CodeGrade properly, be sure to use the `data = no_out_dd_ad` argument in the regression model here and below.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q6 # 

### TYPE YOUR CODE BELOW ###

#Run a linear regression of arrival delay on departure delay
lm_dep <- lm(arr_delay ~ dep_delay, data = no_out_dd_ad)

Q6 <- summary(lm_dep)

### VIEW OUTPUT ###
Q6

```


### Q7 Using the `no_out_dd_ad` dataframe, create another regression, this time adding distance as a predictor to the regression from Q6.

-   The summary of the model should be assigned to Q7. Do not round.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q7 # 

### TYPE YOUR CODE BELOW ###

#Create multiple regression adding distance as a predictor
lm_dep_dis <- lm(arr_delay ~ dep_delay + distance, data = no_out_dd_ad)

Q7 <- summary(lm_dep_dis) #both variables appear significant, but should we worry about colinearity?



### VIEW OUTPUT ###
Q7


```

### Q8 Using the `no_out_dd_ad` dataframe, calculate standardized regression coefficients with lm.beta for the regression from Q7.

-   Assign the results of lm.beta() to Q8. Do not round.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q8 # 

### TYPE YOUR CODE BELOW ###

#Calculate standardized regression coefficients
Q8 <- lm.beta(lm_dep_dis)

#Departure delay appears to be the stronger predictor


### VIEW OUTPUT ###
Q8

```

### Q9 Using the `no_out_dd_ad` dataframe, create another regression, this time adding carrier as an additional predictor to the regression from Q7. Store the model at `mod1` and the summary to Q9.

-   The summary of the model should be assigned to Q9. Do not round.

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q9 # 

### TYPE YOUR CODE BELOW ###

mod1 <- lm(arr_delay ~ dep_delay + distance + carrier, no_out_dd_ad)

Q9 <- summary(mod1)

### VIEW OUTPUT ###
Q9


```


### Q10 Use the regression model `mod1` from Q9 and the `predict` function to predict the arrival delay, in minutes, for an American Airlines (AA) plane that has 250 miles to its destination and a 30-minute departure delay. Store the prediction in Q10.

-   The prediction should be assigned to Q10. Do not round.
-   The `predict()` function requires the regression model and a data frame you create of the predictor variable names and corresponding values. The general structure of predict is `predict(model, data.frame)`.
-   For examples on how to use the `predict` function, see [here](https://favtutor.com/blogs/predict-function-in-r) or [here](https://www.statology.org/r-lm-predict/)

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q10 # 

### TYPE YOUR CODE BELOW ###

test <- data.frame(carrier = 'AA', 
                   distance = 250, 
                   dep_delay = 30)

Q10 <- predict(mod1, test)

### VIEW OUTPUT ###
Q10
```




------------------------------------------------------------------------

# Before submitting to Code Grade:

1)  Clear objects from your environment. Click the broom in the Environment pane in the top right. This will erase any variables (like Q1, Q2) that you've stored.

2)  Rerun all your code. You can click the "Run" option above in this script pane (top right of notebook), then select "Run all". You should have all the variables stored again in the environment pane, and you should see no red error messages in the console below.

------------------------------------------------------------------------
