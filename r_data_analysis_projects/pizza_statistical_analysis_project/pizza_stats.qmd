---
title: 'DTSC 650: Data Analytics In R'
subtitle: 'CodeGrade Assignments Part 2: pizzaStats'
output: html_notebook
editor_options:
  chunk_output_type: inline
---

## Student Info

```         
Name: Steph Roberts
Term: 2024 SP1
Date: 7 Feb 2024
```

------------------------------------------------------------------------

## General Instructions

------------------------------------------------------------------------

### Name of File

Name your assignment file **`pizzaStats`**. This is a quarto "markdown" file, which has the file has the extension '.qmd'.

------------------------------------------------------------------------

### Allowable packages

The only allowable packages are `tidyverse` and `lm.beta`. You should not use any other packages as CodeGrade is not set up to accept them on this assignment.

-   If the allowable packages are not installed on your local computer, you'll need to do a one-time installation *from the Console Window in RStudio* for each package like this:\
    **`install.packages('<package name>')`**\
    *Do not attempt to install packages in code that you submit to CodeGrade.*

-   Note: installing the entire tidyverse with `install.packages('tidyverse')` from the Console Window will save you from having to install any of the tidyverse's individual packages in the future.

-   In your code, load the package's library like this: **`library(<library name>)`**

-   **Download the pizza.csv file from Brightspace and place it in the same folder/directory as your script file. Then in RStudio, set your Working Directory to your Source File location: In the menus choose Session \| Set Working Directory \| To Source File Location.**

-   Load the pizza.csv file like this: `pizza <- read_csv('pizza.csv')`

------------------------------------------------------------------------

### Data Set

The data set for this assignment is called **`pizza`**. It is from Introduction to [***Statistics and Data Analysis - with exercises, solutions and applications in R***](https://chris.userweb.mwn.de/book/) by by Christian Heumann, Michael Schomaker and Shalabh.

------------------------------------------------------------------------

### Pipe Notation

You may use the `tidyverse` pipe **`%>%`** or the new base R pipe **`|>`**. See [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) for a comparison.

You are expected to use pipe notation in all of the CodeGrade assignments. Although there are alternate ways to filter, subset, and summarize data sets, using the pipe creates more readable code and is an important skill to develop.

------------------------------------------------------------------------

### Rounding requirement

-   Round all float/dbl values to two decimal places.

------------------------------------------------------------------------

### Dataframe vs. Tibble

Typically, in CodeGrade assignments, we expect output to be dataframes, not tibbles, unless otherwise noted.

------------------------------------------------------------------------

### Inline vs. Console

By default, RStudio uses Inline output (Notebook mode) on R Markdown documents. You can switch between Inline and Console output modes by clicking the gear button in the editor toolbar (to the left of the green "insert new code chunk") and choosing either "Chunk Output Inline" or "Chunk Output in Console". See [here](https://bookdown.org/yihui/rmarkdown/notebook.html#creating-a-notebook) for more information.

Console output can be useful for debugging since that's how your solutions will appear to CodeGrade. You can type code directly into the Console as well and run it from there.

------------------------------------------------------------------------

### Preliminaries

```{r}
### It's always a good idea when working in RStudio to start with a clean environment. 
### Clear objects from the environment memory that may be leftoever from previous 
###   versions of your code or other assignments by running the following line:
rm(list = ls())

### Load Libraries
library(tidyverse) 
library(lm.beta)

### Load the data file
pizza <- read_csv('pizza.csv')

### There may be red warning messages about nycflights13 and dplyr. You can ignore these. Feel free to search online for the explanations for these messages.
```

------------------------------------------------------------------------

## Questions

------------------------------------------------------------------------

### Q1 Create a correlation matrix for temperature, bill, pizzas, and got_wine.

-   Assign the matrix to Q1. It should look something like this:

```         
        temperature   bill   pizzas got_wine 
temperature [value] [value] [value]  [value]
bill        [value] [value] [value]  [value]
pizzas      [value] [value] [value]  [value]
got_wine    [value] [value] [value]  [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q1 # 

### TYPE YOUR CODE BELOW ###

#Check summary, note there aren't missing values
summary(pizza)

#Create correlation matrix
Q1 <- pizza |> 
  select(temperature, 
         bill, 
         pizzas, 
         got_wine) |> 
  cor() |> 
  round(2)

### VIEW OUTPUT ###
Q1

```

### Q2 Create a correlation matrix of the relationships between time, temperature, bill, and pizzas for Laura in the East branch.

-   Assign the matrix to Q2. It should look something like this:

```         
               time temperature    bill  pizzas
time        [value]     [value] [value] [value]
temperature [value]     [value] [value] [value]
bill        [value]     [value] [value] [value]
pizzas      [value]     [value] [value] [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q2 # 

### TYPE YOUR CODE BELOW ###

head(pizza)

Q2 <- pizza |> 
  filter(operator == 'Laura' & 
           branch == 'East') |> 
  select(time, 
         temperature, 
         bill, 
         pizzas) |> 
  cor() |> 
  round(2)



### VIEW OUTPUT ###
Q2

```

### Q3 Run a regression predicting whether or not wine was ordered from temperature, bill, and pizza.

-   Assign the coefficients of the summary of the model to Q3. It should look something like this:

```         
      Estimate Std. Error z   value Pr(>|z|)
(Intercept) [value] [value] [value]  [value]
temperature [value] [value] [value]  [value]
bill        [value] [value] [value]  [value]
pizzas      [value] [value] [value]  [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q3 # 

### TYPE YOUR CODE BELOW ###

glm1 <- glm(got_wine ~ temperature + bill + pizzas, binomial(), pizza)

glm1_sum <- summary(glm1)

Q3 <- round(glm1_sum$coefficients, 2)


### VIEW OUTPUT ###
Q3

```

### Q4 Run a regression predicting bill from temperature, pizzas, and got_wine.

-   Assign the standardized regression coefficients to Q4 by using the lm.beta() function. You should not round these values.
-   Note: CodeGrade will be grading you based on the last line (just the values).
-   The output should look something like this:

```         
Call:
lm(formula = [label] ~ [label] + [label] + [label], data = [label])

Standardized Coefficients::
(Intercept) temperature  pizzas got_wine
    [value]     [value] [value]  [value]
```

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q4 # 

### TYPE YOUR CODE BELOW ###

lm1 <- lm(bill ~ temperature + pizzas + got_wine, pizza)

Q4 <- lm.beta(lm1)


### VIEW OUTPUT ###
Q4

```

### Q5 Add operator to the regression from Q4. Which is the better model?

-   Assign the better model's AIC to Q5.
-   Use the classical AIC (k=2).

```{r}
### Do not edit the following line. It is used by CodeGrade.
# CG Q5 # 

### TYPE YOUR CODE BELOW ###


lm2 <- update(lm1, .~. + operator)

round(AIC(lm1, lm2), 2)

Q5 <- round(AIC(lm1),2)

### VIEW OUTPUT ###
Q5

```

------------------------------------------------------------------------

# Before submitting to Code Grade:

1)  Clear objects from your environment. Click the broom in the Environment pane in the top right. This will erase any variables (like Q1, Q2) that you've stored.

2)  Rerun all your code. You can click the "Run" option above in this script pane (top right of notebook), then select "Run all". You should have all the variables stored again in the environment pane, and you should see no red error messages in the console below.

------------------------------------------------------------------------
